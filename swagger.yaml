swagger: '2.0'
info:
  title: kinto
  version: '1.13'
  description: >-
    Kinto is a minimalist JSON storage service with synchronisation and sharing
    abilities. It is meant to be easy to use and easy to self-host.
  license:
    name: Apache License (2.0)
    url: 'http://www.apache.org/licenses/LICENSE-2.0'
host: kinto.dev.mozaws.net
basePath: /v1
schemes:
  - https
securityDefinitions:
  basicAuth:
    type: basic
    description: HTTP Basic Authentication.
consumes:
  - application/json
produces:
  - application/json
tags:
  - name: Buckets
  - name: Groups
  - name: Collections
  - name: Records
  - name: Utilities
paths:
  /:
    get:
      tags:
        - Utilities
      operationId: server_info
      description: Information about the running instance.
      responses:
        '200':
          $ref: '#/responses/server-info'
  /__heartbeat__:
    get:
      description: Return the status of dependent services.
      tags:
        - Utilities
      operationId: __heartbeat
      responses:
        '200':
          description: Object with subsystems status.
          schema:
            type: object
            properties:
              cache:
                type: boolean
              storage:
                type: boolean
              permission:
                type: boolean
            additionalProperties:
              type: boolean
        '503':
          description: One or more systems are failing.
          schema:
            type: object
            properties:
              cache:
                type: boolean
              storage:
                type: boolean
              permission:
                type: boolean
            additionalProperties:
              type: boolean
  /__lbheartbeat__:
    get:
      tags:
        - Utilities
      operationId: __lbheartbeat
      responses:
        '200':
          description: Returns empty object.
          schema:
            type: object
  /__version__:
    get:
      tags:
        - Utilities
      operationId: __version
      responses:
        '200':
          description: Returns object with distribution details.
          schema:
            type: object
        '404':
          description: version.json file not found.
  /batch:
    post:
      tags:
        - Utilities
      operationId: batch
      description: Send multiple operations in one request.
      parameters:
        - $ref: '#/parameters/batch'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/batch-200'
        '400':
          $ref: '#/responses/batch-400'
  /contribute.json:
    get:
      tags:
        - Utilities
      operationId: contribute
      responses:
        '200':
          description: Open source contribution information.
          schema:
            type: object
  /buckets:
    get:
      tags:
        - Buckets
      operationId: get_buckets
      description: List all acessible buckets.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
        - $ref: '#/parameters/_limit'
        - $ref: '#/parameters/_token'
        - $ref: '#/parameters/_fields'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-get-200'
        '304':
          $ref: '#/responses/list-get-304'
        '400':
          $ref: '#/responses/list-get-400'
        '401':
          $ref: '#/responses/list-get-401'
        '403':
          $ref: '#/responses/list-get-403'
        '406':
          $ref: '#/responses/list-get-406'
        '412':
          $ref: '#/responses/list-get-412'
    post:
      tags:
        - Buckets
      operationId: create_bucket
      description: Create a bucket.
      parameters:
        - in: body
          name: bucket
          description: Bucket information.
          required: false
          schema:
            $ref: '#/definitions/Bucket'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return an existing bucket.
          schema:
            $ref: '#/definitions/Bucket'
        '201':
          description: Return created bucket.
          schema:
            $ref: '#/definitions/Bucket'
        '400':
          $ref: '#/responses/list-post-400'
        '401':
          $ref: '#/responses/list-post-401'
        '403':
          $ref: '#/responses/list-post-403'
        '406':
          $ref: '#/responses/list-post-406'
        '412':
          $ref: '#/responses/list-post-412'
        '415':
          $ref: '#/responses/list-post-415'
    delete:
      tags:
        - Buckets
      operationId: delete_buckets
      description: Delete all writable buckets.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
      responses:
        '200':
          $ref: '#/responses/list-delete-200'
        '400':
          $ref: '#/responses/list-delete-400'
        '401':
          $ref: '#/responses/list-delete-401'
        '403':
          $ref: '#/responses/list-delete-403'
        '405':
          $ref: '#/responses/list-delete-405'
        '406':
          $ref: '#/responses/list-delete-406'
        '412':
          $ref: '#/responses/list-delete-412'
  '/buckets/{bucket_id}':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
      - $ref: '#/parameters/_fields'
    get:
      tags:
        - Buckets
      operationId: get_bucket
      description: Retrieve an existing bucket.
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return matched bucket.
          schema:
            $ref: '#/definitions/Bucket'
        '304':
          $ref: '#/responses/object-get-304'
        '400':
          $ref: '#/responses/object-get-400'
        '401':
          $ref: '#/responses/object-get-401'
        '403':
          $ref: '#/responses/object-get-403'
        '404':
          $ref: '#/responses/object-get-404'
        '406':
          $ref: '#/responses/object-get-406'
        '412':
          $ref: '#/responses/object-get-412'
    put:
      tags:
        - Buckets
      operationId: update_bucket
      description: Create or replace a bucket.
      parameters:
        - $ref: '#/parameters/bucket'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return replaced bucket.
          schema:
            $ref: '#/definitions/Bucket'
        '201':
          description: Return created Bucket.
          schema:
            $ref: '#/definitions/Bucket'
        '400':
          $ref: '#/responses/object-put-400'
        '401':
          $ref: '#/responses/object-put-401'
        '403':
          $ref: '#/responses/object-put-403'
        '406':
          $ref: '#/responses/object-put-406'
        '412':
          $ref: '#/responses/object-put-412'
        '415':
          $ref: '#/responses/object-put-415'
    patch:
      tags:
        - Buckets
      operationId: patch_bucket
      consumes:
        - application/json
        - application/merge-patch+json
        - application/json-patch+json
      description: Modify an existing bucket.
      parameters:
        - $ref: '#/parameters/bucket'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return updated bucket.
          schema:
            $ref: '#/definitions/Bucket'
        '400':
          $ref: '#/responses/object-patch-400'
        '401':
          $ref: '#/responses/object-patch-401'
        '403':
          $ref: '#/responses/object-patch-403'
        '404':
          $ref: '#/responses/object-patch-404'
        '406':
          $ref: '#/responses/object-patch-406'
        '412':
          $ref: '#/responses/object-patch-412'
        '415':
          $ref: '#/responses/object-patch-415'
    delete:
      tags:
        - Buckets
      operationId: delete_bucket
      description: Delete a bucket.
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/object-delete-200'
        '400':
          $ref: '#/responses/object-delete-400'
        '401':
          $ref: '#/responses/object-delete-401'
        '403':
          $ref: '#/responses/object-delete-403'
        '404':
          $ref: '#/responses/object-delete-404'
        '406':
          $ref: '#/responses/object-delete-406'
        '412':
          $ref: '#/responses/object-delete-412'
  '/buckets/{bucket_id}/groups':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
    get:
      tags:
        - Groups
      operationId: get_groups
      description: Retrieve the list of bucketâ€™s group.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
        - $ref: '#/parameters/_limit'
        - $ref: '#/parameters/_token'
        - $ref: '#/parameters/_fields'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-get-200'
        '304':
          $ref: '#/responses/list-get-304'
        '400':
          $ref: '#/responses/list-get-400'
        '401':
          $ref: '#/responses/list-get-401'
        '403':
          $ref: '#/responses/list-get-403'
        '406':
          $ref: '#/responses/list-get-406'
        '412':
          $ref: '#/responses/list-get-412'
    post:
      tags:
        - Groups
      operationId: create_group
      description: Create a group.
      parameters:
        - $ref: '#/parameters/group'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return an existing group.
          schema:
            $ref: '#/definitions/Group'
        '201':
          description: Return created group.
          schema:
            $ref: '#/definitions/Group'
        '400':
          $ref: '#/responses/list-post-400'
        '401':
          $ref: '#/responses/list-post-401'
        '403':
          $ref: '#/responses/list-post-403'
        '406':
          $ref: '#/responses/list-post-406'
        '412':
          $ref: '#/responses/list-post-412'
        '415':
          $ref: '#/responses/list-post-415'
    delete:
      tags:
        - Groups
      operationId: delete_groups
      description: Delete writable groups.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-delete-200'
        '400':
          $ref: '#/responses/list-delete-400'
        '401':
          $ref: '#/responses/list-delete-401'
        '403':
          $ref: '#/responses/list-delete-403'
        '405':
          $ref: '#/responses/list-delete-405'
        '406':
          $ref: '#/responses/list-delete-406'
        '412':
          $ref: '#/responses/list-delete-412'
  '/buckets/{bucket_id}/groups/{group_id}':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
      - in: path
        name: group_id
        description: Group id.
        required: true
        type: string
      - $ref: '#/parameters/_fields'
    get:
      tags:
        - Groups
      operationId: get_group
      description: Retrieve a group.
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return matched group.
          schema:
            $ref: '#/definitions/Group'
        '304':
          $ref: '#/responses/object-get-304'
        '400':
          $ref: '#/responses/object-get-400'
        '401':
          $ref: '#/responses/object-get-401'
        '403':
          $ref: '#/responses/object-get-403'
        '404':
          $ref: '#/responses/object-get-404'
        '406':
          $ref: '#/responses/object-get-406'
        '412':
          $ref: '#/responses/object-get-412'
    put:
      tags:
        - Groups
      operationId: update_group
      description: Update a group.
      parameters:
        - $ref: '#/parameters/group'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return replaced group.
          schema:
            $ref: '#/definitions/Group'
        '201':
          description: Return created group.
          schema:
            $ref: '#/definitions/Group'
        '400':
          $ref: '#/responses/object-put-400'
        '401':
          $ref: '#/responses/object-put-401'
        '403':
          $ref: '#/responses/object-put-403'
        '406':
          $ref: '#/responses/object-put-406'
        '412':
          $ref: '#/responses/object-put-412'
        '415':
          $ref: '#/responses/object-put-415'
    patch:
      tags:
        - Groups
      operationId: patch_group
      description: Modify an existing group.
      consumes:
        - application/json
        - application/merge-patch+json
        - application/json-patch+json
      parameters:
        - $ref: '#/parameters/group'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return updated group.
          schema:
            $ref: '#/definitions/Group'
        '400':
          $ref: '#/responses/object-patch-400'
        '401':
          $ref: '#/responses/object-patch-401'
        '403':
          $ref: '#/responses/object-patch-403'
        '404':
          $ref: '#/responses/object-patch-404'
        '406':
          $ref: '#/responses/object-patch-406'
        '412':
          $ref: '#/responses/object-patch-412'
        '415':
          $ref: '#/responses/object-patch-415'
    delete:
      tags:
        - Groups
      operationId: delete_group
      description: Delete a group.
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/object-delete-200'
        '400':
          $ref: '#/responses/object-delete-400'
        '401':
          $ref: '#/responses/object-delete-401'
        '403':
          $ref: '#/responses/object-delete-403'
        '404':
          $ref: '#/responses/object-delete-404'
        '406':
          $ref: '#/responses/object-delete-406'
        '412':
          $ref: '#/responses/object-delete-412'
  '/buckets/{bucket_id}/collections':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
    get:
      tags:
        - Collections
      operationId: get_collections
      description: List bucketâ€™s collections.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
        - $ref: '#/parameters/_limit'
        - $ref: '#/parameters/_token'
        - $ref: '#/parameters/_fields'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-get-200'
        '304':
          $ref: '#/responses/list-get-304'
        '400':
          $ref: '#/responses/list-get-400'
        '401':
          $ref: '#/responses/list-get-401'
        '403':
          $ref: '#/responses/list-get-403'
        '406':
          $ref: '#/responses/list-get-406'
        '412':
          $ref: '#/responses/list-get-412'
    post:
      tags:
        - Collections
      operationId: create_collection
      description: Create a collection.
      parameters:
        - $ref: '#/parameters/collection'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return existing collection.
          schema:
            $ref: '#/definitions/Collection'
        '201':
          description: Return created collection.
          schema:
            $ref: '#/definitions/Collection'
        '400':
          $ref: '#/responses/list-post-400'
        '401':
          $ref: '#/responses/list-post-401'
        '403':
          $ref: '#/responses/list-post-403'
        '406':
          $ref: '#/responses/list-post-406'
        '412':
          $ref: '#/responses/list-post-412'
        '415':
          $ref: '#/responses/list-post-415'
    delete:
      tags:
        - Collections
      operationId: delete_collections
      description: Delete writable collections.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-delete-200'
        '400':
          $ref: '#/responses/list-delete-400'
        '401':
          $ref: '#/responses/list-delete-401'
        '403':
          $ref: '#/responses/list-delete-403'
        '405':
          $ref: '#/responses/list-delete-405'
        '406':
          $ref: '#/responses/list-delete-406'
        '412':
          $ref: '#/responses/list-delete-412'
  '/buckets/{bucket_id}/collections/{collection_id}':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
      - in: path
        name: collection_id
        description: Colection id.
        required: true
        type: string
      - $ref: '#/parameters/_fields'
    get:
      tags:
        - Collections
      operationId: get_collection
      description: Retreive an existing collection.
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return matching collection.
          schema:
            $ref: '#/definitions/Collection'
        '304':
          $ref: '#/responses/object-get-304'
        '400':
          $ref: '#/responses/object-get-400'
        '401':
          $ref: '#/responses/object-get-401'
        '403':
          $ref: '#/responses/object-get-403'
        '404':
          $ref: '#/responses/object-get-404'
        '406':
          $ref: '#/responses/object-get-406'
        '412':
          $ref: '#/responses/object-get-412'
    put:
      tags:
        - Collections
      operationId: update_collection
      description: Create or replace a collection.
      parameters:
        - $ref: '#/parameters/collection'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return replaced collection.
          schema:
            $ref: '#/definitions/Collection'
        '201':
          description: Return created collection.
          schema:
            $ref: '#/definitions/Collection'
        '400':
          $ref: '#/responses/object-put-400'
        '401':
          $ref: '#/responses/object-put-401'
        '403':
          $ref: '#/responses/object-put-403'
        '406':
          $ref: '#/responses/object-put-406'
        '412':
          $ref: '#/responses/object-put-412'
        '415':
          $ref: '#/responses/object-put-415'
    patch:
      tags:
        - Collections
      operationId: patch_collection
      description: Modify an existing collection.
      consumes:
        - application/json
        - application/merge-patch+json
        - application/json-patch+json
      parameters:
        - $ref: '#/parameters/collection'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return updated group.
          schema:
            $ref: '#/definitions/Collection'
        '400':
          $ref: '#/responses/object-patch-400'
        '401':
          $ref: '#/responses/object-patch-401'
        '403':
          $ref: '#/responses/object-patch-403'
        '404':
          $ref: '#/responses/object-patch-404'
        '406':
          $ref: '#/responses/object-patch-406'
        '412':
          $ref: '#/responses/object-patch-412'
        '415':
          $ref: '#/responses/object-patch-415'
    delete:
      tags:
        - Collections
      operationId: delete_collection
      description: Delete a collection.
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/object-delete-200'
        '400':
          $ref: '#/responses/object-delete-400'
        '401':
          $ref: '#/responses/object-delete-401'
        '403':
          $ref: '#/responses/object-delete-403'
        '404':
          $ref: '#/responses/object-delete-404'
        '406':
          $ref: '#/responses/object-delete-406'
        '412':
          $ref: '#/responses/object-delete-412'
  '/buckets/{bucket_id}/collections/{collection_id}/records':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
      - in: path
        name: collection_id
        description: Collection id.
        required: true
        type: string
    get:
      tags:
        - Records
      operationId: get_records
      description: Retrieve stored records.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
        - $ref: '#/parameters/_limit'
        - $ref: '#/parameters/_token'
        - $ref: '#/parameters/_fields'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-get-200'
        '304':
          $ref: '#/responses/list-get-304'
        '400':
          $ref: '#/responses/list-get-400'
        '401':
          $ref: '#/responses/list-get-401'
        '403':
          $ref: '#/responses/list-get-403'
        '406':
          $ref: '#/responses/list-get-406'
        '412':
          $ref: '#/responses/list-get-412'
    post:
      tags:
        - Records
      operationId: create_record
      description: Upload a record.
      parameters:
        - $ref: '#/parameters/record'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return existing record.
          schema:
            $ref: '#/definitions/Record'
        '201':
          description: Return created record.
          schema:
            $ref: '#/definitions/Record'
        '400':
          $ref: '#/responses/list-post-400'
        '401':
          $ref: '#/responses/list-post-401'
        '403':
          $ref: '#/responses/list-post-403'
        '406':
          $ref: '#/responses/list-post-406'
        '412':
          $ref: '#/responses/list-post-412'
        '415':
          $ref: '#/responses/list-post-415'
    delete:
      tags:
        - Records
      operationId: delete_records
      description: Delete stored records.
      parameters:
        - $ref: '#/parameters/_since'
        - $ref: '#/parameters/_before'
        - $ref: '#/parameters/_sort'
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/list-delete-200'
        '400':
          $ref: '#/responses/list-delete-400'
        '401':
          $ref: '#/responses/list-delete-401'
        '403':
          $ref: '#/responses/list-delete-403'
        '405':
          $ref: '#/responses/list-delete-405'
        '406':
          $ref: '#/responses/list-delete-406'
        '412':
          $ref: '#/responses/list-delete-412'
  '/buckets/{bucket_id}/collections/{collection_id}/records/{record_id}':
    parameters:
      - in: path
        name: bucket_id
        description: Bucket id.
        required: true
        type: string
      - in: path
        name: collection_id
        description: Colection id.
        required: true
        type: string
      - in: path
        name: record_id
        description: Record id.
        required: true
        type: string
      - $ref: '#/parameters/_fields'
    get:
      tags:
        - Records
      operationId: get_record
      description: Retrieve a single record.
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return matching record.
          schema:
            $ref: '#/definitions/Record'
        '304':
          $ref: '#/responses/object-get-304'
        '400':
          $ref: '#/responses/object-get-400'
        '401':
          $ref: '#/responses/object-get-401'
        '403':
          $ref: '#/responses/object-get-403'
        '404':
          $ref: '#/responses/object-get-404'
        '406':
          $ref: '#/responses/object-get-406'
        '412':
          $ref: '#/responses/object-get-412'
    put:
      tags:
        - Records
      operationId: update_record
      description: Create or replace a record.
      parameters:
        - $ref: '#/parameters/record'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return replaced record.
          schema:
            $ref: '#/definitions/Record'
        '201':
          description: Return created record.
          schema:
            $ref: '#/definitions/Record'
        '400':
          $ref: '#/responses/object-put-400'
        '401':
          $ref: '#/responses/object-put-401'
        '403':
          $ref: '#/responses/object-put-403'
        '406':
          $ref: '#/responses/object-put-406'
        '412':
          $ref: '#/responses/object-put-412'
        '415':
          $ref: '#/responses/object-put-415'
    patch:
      tags:
        - Records
      operationId: patch_record
      description: Modify an existing record.
      consumes:
        - application/json
        - application/merge-patch+json
        - application/json-patch+json
      parameters:
        - $ref: '#/parameters/record'
      security:
        - basicAuth: []
      responses:
        '200':
          description: Return updated record.
          schema:
            $ref: '#/definitions/Record'
        '400':
          $ref: '#/responses/object-patch-400'
        '401':
          $ref: '#/responses/object-patch-401'
        '403':
          $ref: '#/responses/object-patch-403'
        '404':
          $ref: '#/responses/object-patch-404'
        '406':
          $ref: '#/responses/object-patch-406'
        '412':
          $ref: '#/responses/object-patch-412'
        '415':
          $ref: '#/responses/object-patch-415'
    delete:
      tags:
        - Records
      description: Delete a single record.
      operationId: delete_record
      security:
        - basicAuth: []
      responses:
        '200':
          $ref: '#/responses/object-delete-200'
        '400':
          $ref: '#/responses/object-delete-400'
        '401':
          $ref: '#/responses/object-delete-401'
        '403':
          $ref: '#/responses/object-delete-403'
        '404':
          $ref: '#/responses/object-delete-404'
        '406':
          $ref: '#/responses/object-delete-406'
        '412':
          $ref: '#/responses/object-delete-412'
definitions:
  Bucket:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: string
          last_modified:
            type: integer
        x-properties:
          type: any
      permissions:
        type: object
        properties:
          read:
            type: array
            items:
              type: string
            uniqueItems: true
          write:
            type: array
            items:
              type: string
            uniqueItems: true
          'group:create':
            type: array
            items:
              type: string
            uniqueItems: true
          'collection:create':
            type: array
            items:
              type: string
            uniqueItems: true
          'record:create':
            type: array
            items:
              type: string
            uniqueItems: true
  Group:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: string
          last_modified:
            type: integer
          members:
            type: array
            uniqueItems: true
            items:
              type: string
        x-properties:
          type: any
        required:
          - members
      permissions:
        type: object
        properties:
          read:
            type: array
            items:
              type: string
            uniqueItems: true
          write:
            type: array
            items:
              type: string
            uniqueItems: true
  Collection:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: string
          last_modified:
            type: integer
          cache_expires:
            type: integer
          schema:
            type: object
        x-properties:
          type: any
      permissions:
        type: object
        properties:
          read:
            type: array
            items:
              type: string
            uniqueItems: true
          write:
            type: array
            items:
              type: string
            uniqueItems: true
          'record:create':
            type: array
            items:
              type: string
            uniqueItems: true
  Record:
    type: object
    properties:
      data:
        type: object
        properties:
          id:
            type: string
          last_modified:
            type: integer
        x-properties:
          type: any
      permissions:
        type: object
        properties:
          read:
            type: array
            items:
              type: string
            uniqueItems: true
          write:
            type: array
            items:
              type: string
            uniqueItems: true
  List:
    type: object
    properties:
      data:
        type: array
        items:
          type: object
          properties:
            id:
              type: string
            last_modified:
              type: integer
          x-properties:
            type: any
  Error:
    type: object
    properties:
      code:
        type: integer
      errno:
        type: integer
      error:
        type: string
    x-properties:
      type: any
  Deleted:
    type: object
    properties:
      id:
        type: string
      last_modified:
        type: integer
      deleted:
        type: boolean
parameters:
  _since:
    in: query
    name: _since
    description: Get entries after a timestamp.
    required: false
    type: integer
  _before:
    in: query
    name: _before
    description: Get entries before a timestamp.
    required: false
    type: integer
  _sort:
    in: query
    name: _sort
    description: Fields to sort ascending on a list (use -field to sort descending).
    required: false
    type: array
    items:
      type: string
    collectionFormat: csv
  _limit:
    in: query
    name: _limit
    description: Limit objects on a list.
    required: false
    type: integer
  _token:
    in: query
    name: _token
    description: Set offset on a limited list.
    required: false
    type: integer
  _fields:
    in: query
    name: _fields
    description: Fields to compose response (id and last_modified are always returned).
    required: false
    type: array
    items:
      type: string
    collectionFormat: csv
  bucket:
    in: body
    name: bucket
    description: Bucket information.
    required: false
    schema:
      $ref: '#/definitions/Bucket'
  group:
    in: body
    name: group
    description: Group information.
    required: true
    schema:
      $ref: '#/definitions/Group'
  collection:
    in: body
    name: collection
    description: Collection information.
    required: false
    schema:
      $ref: '#/definitions/Collection'
  record:
    in: body
    name: record
    description: Record information.
    required: false
    schema:
      $ref: '#/definitions/Record'
  batch:
    in: body
    name: batch
    description: Batch operation properties.
    required: true
    schema:
      type: object
      properties:
        requests:
          type: array
          items:
            type: object
            properties:
              method:
                type: string
              path:
                type: string
              body:
                type: object
                properties:
                  data:
                    type: object
                    x-properties:
                      type: any
                  permissions:
                    type: object
                    x-properties:
                      type: any
              headers:
                type: object
                additionalProperties:
                  type: string
        defaults:
          type: object
          properties:
            method:
              type: string
            path:
              type: string
            body:
              type: object
              properties:
                data:
                  type: object
                  x-properties:
                    type: any
                permissions:
                  type: object
                  x-properties:
                    type: any
            headers:
              type: object
              additionalProperties:
                type: string
responses:
  server-info:
    description: Object with server properties.
    schema:
      type: object
      properties:
        project_name:
          type: string
        url:
          type: string
        project_version:
          type: string
        http_api_version:
          type: string
        project_docs:
          type: string
        capabilities:
          type: object
          additionalProperties:
            type: object
        settings:
          type: object
          properties:
            batch_max_requests:
              type: integer
            readonly:
              type: boolean
          x-properties:
            type: all
      x-properties:
        type: all
  batch-200:
    description: Operation responses.
    schema:
      type: object
      properties:
        responses:
          type: array
          items:
            type: object
            properties:
              status:
                type: integer
              path:
                type: string
              body:
                type: object
              headers:
                type: object
  batch-400:
    description: The request body is invalid.
    schema:
      $ref: '#/definitions/Error'
  object-get-304:
    description: Object did not change since value in ``If-None-Match`` header.
  object-get-400:
    description: The request headers are invalid.
    schema:
      $ref: '#/definitions/Error'
  object-get-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  object-get-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  object-get-404:
    description: The object does not exist or was deleted.
    schema:
      $ref: '#/definitions/Error'
  object-get-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  object-get-412:
    description: Object changed since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
  object-put-400:
    description: The request body is invalid.
    schema:
      $ref: '#/definitions/Error'
  object-put-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  object-put-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  object-put-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  object-put-412:
    description: Object changed or deleted since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
  object-put-415:
    description: The client request was not sent with a correct Content-Type.
    schema:
      $ref: '#/definitions/Error'
  object-patch-400:
    description: The request body is invalid.
    schema:
      $ref: '#/definitions/Error'
  object-patch-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  object-patch-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  object-patch-404:
    description: The object does not exist or was deleted.
    schema:
      $ref: '#/definitions/Error'
  object-patch-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  object-patch-412:
    description: Object changed or deleted since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
  object-patch-415:
    description: The client request was not sent with a correct Content-Type.
    schema:
      $ref: '#/definitions/Error'
  object-delete-200:
    description: Return the deleted object.
    schema:
      $ref: '#/definitions/Deleted'
  object-delete-400:
    description: The request headers are invalid.
    schema:
      $ref: '#/definitions/Error'
  object-delete-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  object-delete-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  object-delete-404:
    description: The object does not exist or was already deleted.
    schema:
      $ref: '#/definitions/Error'
  object-delete-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  object-delete-412:
    description: Object changed or deleted since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
  list-get-200:
    description: The request was processed.
    schema:
      $ref: '#/definitions/List'
  list-get-304:
    description: List has not changed since value in ``If-None-Match`` header.
  list-get-400:
    description: The request headers or querystring are invalid.
    schema:
      $ref: '#/definitions/Error'
  list-get-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  list-get-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  list-get-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  list-get-412:
    description: List has changed since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
  list-post-400:
    description: The request body is invalid
    schema:
      $ref: '#/definitions/Error'
  list-post-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  list-post-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  list-post-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  list-post-412:
    description: List has changed since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
  list-post-415:
    description: The client request was not sent with a correct Content-Type.
    schema:
      $ref: '#/definitions/Error'
  list-delete-200:
    description: The objects were deleted.
    schema:
      $ref: '#/definitions/List'
  list-delete-400:
    description: The request body is invalid
    schema:
      $ref: '#/definitions/Error'
  list-delete-401:
    description: The request is missing authentication headers.
    schema:
      $ref: '#/definitions/Error'
  list-delete-403:
    description: >-
      The user is not allowed to perform the operation, or the resource is not
      accessible.
    schema:
      $ref: '#/definitions/Error'
  list-delete-405:
    description: This endpoint is not available.
    schema:
      $ref: '#/definitions/Error'
  list-delete-406:
    description: The client doesn't accept supported responses Content-Type.
    schema:
      $ref: '#/definitions/Error'
  list-delete-412:
    description: List has changed since value in ``If-Match`` header.
    schema:
      $ref: '#/definitions/Error'
